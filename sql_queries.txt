
//SELECT query

SELECT * FROM table

SELECT tableColumn1, tableColumn2, tableColumn2 FROM table

// SELECT query with LIMIT

SELECT id, account_id, total_amt_usd
FROM orders 
LIMIT 20

// SELECT query with ORDER BY and LIMIT (sorting)

SELECT id, account_id, total_amt_usd
FROM orders
ORDER BY total_amt_usd 
LIMIT 20

// SELECT query with ORDER BY and LIMIT (sorting by multiple columns)

SELECT id, account_id, total_amt_usd
FROM orders
ORDER BY account_id, total_amt_usd DESC
LIMIT 20

// SELECT query with WHERE clause
SELECT *
FROM orders
WHERE total_amt_usd < 500
LIMIT 10

// SELECT query with ARITHMETIC operators

SELECT id, account_id, 
   poster_amt_usd/(standard_amt_usd + gloss_amt_usd + poster_amt_usd) AS post_per
FROM orders
LIMIT 10;

// SELECT query with LIKE clause

// string a the end
SELECT name
FROM accounts
WHERE name LIKE '%s'; 

// string in between
SELECT name
FROM accounts
WHERE name LIKE '%one%';

//string at the beginning
SELECT name
FROM accounts
WHERE name LIKE 'C%';

// SELECT query with IN clause

SELECT name, primary_poc, sales_rep_id
FROM accounts
WHERE name IN ('Walmart', 'Target', 'Nordstrom');

// SELECT query with NOT clause

SELECT name, primary_poc, sales_rep_id
FROM accounts
WHERE name NOT IN ('Walmart', 'Target', 'Nordstrom');

SELECT name
FROM accounts
WHERE name NOT LIKE '%one%'; // or '%s' or C%'

// SELECT query with AND & BETWEEN clause

// AND clause
SELECT * 
FROM orders
WHERE standard_qty > 1000 AND poster_qty = 0 AND gloss_qty = 0;

// BETWEEN clause

SELECT occurred_at, gloss_qty 
FROM orders
WHERE gloss_qty BETWEEN 24 AND 29;

// SELECT query with OR clause

// example 1

SELECT id
FROM orders
WHERE gloss_qty > 4000 OR poster_qty > 4000

// exampe 2

SELECT id
FROM orders
WHERE standard_qty = 0 AND (gloss_qty > 1000 OR poster_qty > 1000)

// example 3

SELECT name
FROM accounts
WHERE (name LIKE 'C%' OR name LIKE 'W%') AND ((primary_poc LIKE '%ana%' OR primary_poc LIKE '%Ana%') AND primary_poc NOT LIKE '%eana%');

// SELECT query with JOIN clause

// example 1

SELECT orders.standard_qty, orders.gloss_qty, 
       orders.poster_qty,  accounts.website, 
       accounts.primary_poc
FROM orders
JOIN accounts
ON orders.account_id = accounts.id

// example 2

SELECT r.name region, a.name account, 
       o.total_amt_usd/(o.total + 0.01) unit_price
FROM region r
JOIN sales_reps s
ON s.region_id = r.id
JOIN accounts a
ON a.sales_rep_id = s.id
JOIN orders o
ON o.account_id = a.id;

//filtering with joins lesson2 : episode 18

SELECT region.name regioName, salesRep.name salesRepName, acc.name accountName
FROM region
JOIN sales_reps salesRep
ON region.id = salesRep.region_id
JOIN accounts acc
ON salesRep.id = acc.sales_rep_id
AND region.name = 'Midwest'
ORDER BY acc.name

// SELECT query with COUNT clause

SELECT COUNT(*)
FROM accounts;

SELECT COUNT(accounts.id)
FROM accounts;

// exampe: Find the standard_amt_usd per unit of standard_qty paper. Your solution should use both an aggregation and a mathematical operator.

SELECT SUM (o.standard_amt_usd) / SUM (o.standard_qty+0.01) standard_unit_price
FROM orders o

// SELECT query with MIN, MAX & AVG

// example 1
SELECT MIN(occurred_at) 
FROM orders;

//example 2 
SELECT MAX(occurred_at)
FROM web_events;

//exampe 3
SELECT AVG(standard_qty) mean_standard, AVG(gloss_qty) mean_gloss, 
           AVG(poster_qty) mean_poster, AVG(standard_amt_usd) mean_standard_usd, 
           AVG(gloss_amt_usd) mean_gloss_usd, AVG(poster_amt_usd) mean_poster_usd
FROM orders;

// FINDING MEDIAN
SELECT *
FROM (SELECT total_amt_usd
      FROM orders
      ORDER BY total_amt_usd
      LIMIT 3457) AS Table1
ORDER BY total_amt_usd DESC
LIMIT 2;



